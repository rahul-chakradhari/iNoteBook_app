{
    "sourceFile": "backend/routes/notes.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 19,
            "patches": [
                {
                    "date": 1739442233755,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1739442473369,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,9 +14,9 @@\n     res.status(500).json({ error: \"Internal server error\" });\r\n   }\r\n });\r\n \r\n-// Route 2: Add a new note using POST \"api/notes/addnote\". Requires login// Route 2: Add a new note using POST \"api/notes/addnote\". Requires login\r\n+// Route 2: Add a new note using POST \"api/notes/addnote\". Requires login\r\n router.post(\r\n   \"/addnote\",\r\n   fetchuser,\r\n   [\r\n@@ -45,15 +45,14 @@\n       if (!errors.isEmpty()) {\r\n         return res.status(400).json({ errors: errors.array() });\r\n       }\r\n \r\n-      const { title, description, priority, tag } = req.body;\r\n+      const { title, description, priority } = req.body; // Removed `tag`\r\n \r\n       const note = new Notes({\r\n         title,\r\n         description,\r\n-        priority,\r\n-        tag,\r\n+        priority, // Only saving priority\r\n         user: req.user.id,\r\n       });\r\n \r\n       const savedNote = await note.save();\r\n@@ -64,32 +63,24 @@\n     }\r\n   }\r\n );\r\n \r\n-// Route 3:Update an existing note using POST \"api/notes/updatenote\". Requires login\r\n+// Route 3: Update an existing note using PUT \"api/notes/updatenote\". Requires login\r\n router.put(\"/updatenote/:id\", fetchuser, async (req, res) => {\r\n   const { title, description, priority } = req.body;\r\n   try {\r\n-    //create a newnote object\r\n+    // Create a new note object\r\n     const newNote = {};\r\n-    if (title) {\r\n-      newNote.title = title;\r\n-    }\r\n-    if (description) {\r\n-      newNote.description = description;\r\n-    }\r\n-    if (priority) {\r\n-      newNote.priority = priority;\r\n-    }\r\n-    //find the note to be update and update it\r\n+    if (title) newNote.title = title;\r\n+    if (description) newNote.description = description;\r\n+    if (priority) newNote.priority = priority; // Only updating priority\r\n+\r\n+    // Find the note to be updated and update it\r\n     let note = await Notes.findById(req.params.id);\r\n-    if (!note) {\r\n-      return res.status(404).send(\"Not found\");\r\n-    }\r\n-    if (note.user.toString() !== req.user.id) {\r\n+    if (!note) return res.status(404).send(\"Not found\");\r\n+    if (note.user.toString() !== req.user.id)\r\n       return res.status(401).send(\"Not Allowed\");\r\n-    }\r\n-    //new true means if new contact comes then updated to the database\r\n+\r\n     note = await Notes.findByIdAndUpdate(\r\n       req.params.id,\r\n       { $set: newNote },\r\n       { new: true }\r\n@@ -100,23 +91,19 @@\n     res.status(500).json({ error: \"Internal server error\" });\r\n   }\r\n });\r\n \r\n-// Route 4:Delete an existing note using DELETE \"api/notes/deletenote\". Requires login\r\n+// Route 4: Delete an existing note using DELETE \"api/notes/deletenote\". Requires login\r\n router.delete(\"/deletenote/:id\", fetchuser, async (req, res) => {\r\n   try {\r\n-    //find the note to be deleted and delete it\r\n+    // Find the note to be deleted and delete it\r\n     let note = await Notes.findById(req.params.id);\r\n-    if (!note) {\r\n-      return res.status(404).send(\"Not found\");\r\n-    }\r\n-    //deletion only if the node is of that individual user\r\n-    if (note.user.toString() !== req.user.id) {\r\n+    if (!note) return res.status(404).send(\"Not found\");\r\n+    if (note.user.toString() !== req.user.id)\r\n       return res.status(401).send(\"Not Allowed\");\r\n-    }\r\n-    //new true means if new contact comes then updated to the database\r\n+\r\n     note = await Notes.findByIdAndDelete(req.params.id);\r\n-    res.json({ result: \"previous note has been deleted\", note: note });\r\n+    res.json({ result: \"Previous note has been deleted\", note });\r\n   } catch (error) {\r\n     console.error(error);\r\n     res.status(500).json({ error: \"Internal server error\" });\r\n   }\r\n"
                },
                {
                    "date": 1739442591155,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -67,15 +67,13 @@\n // Route 3: Update an existing note using PUT \"api/notes/updatenote\". Requires login\r\n router.put(\"/updatenote/:id\", fetchuser, async (req, res) => {\r\n   const { title, description, priority } = req.body;\r\n   try {\r\n-    // Create a new note object\r\n     const newNote = {};\r\n     if (title) newNote.title = title;\r\n     if (description) newNote.description = description;\r\n     if (priority) newNote.priority = priority; // Only updating priority\r\n \r\n-    // Find the note to be updated and update it\r\n     let note = await Notes.findById(req.params.id);\r\n     if (!note) return res.status(404).send(\"Not found\");\r\n     if (note.user.toString() !== req.user.id)\r\n       return res.status(401).send(\"Not Allowed\");\r\n@@ -94,9 +92,8 @@\n \r\n // Route 4: Delete an existing note using DELETE \"api/notes/deletenote\". Requires login\r\n router.delete(\"/deletenote/:id\", fetchuser, async (req, res) => {\r\n   try {\r\n-    // Find the note to be deleted and delete it\r\n     let note = await Notes.findById(req.params.id);\r\n     if (!note) return res.status(404).send(\"Not found\");\r\n     if (note.user.toString() !== req.user.id)\r\n       return res.status(401).send(\"Not Allowed\");\r\n"
                },
                {
                    "date": 1739449864669,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -66,24 +66,39 @@\n \r\n // Route 3: Update an existing note using PUT \"api/notes/updatenote\". Requires login\r\n router.put(\"/updatenote/:id\", fetchuser, async (req, res) => {\r\n   const { title, description, priority } = req.body;\r\n+\r\n   try {\r\n+    // Log the incoming note ID and request body\r\n+    console.log(\"Note ID: \", req.params.id);\r\n+    console.log(\"Request body: \", req.body);\r\n+\r\n+    let note = await Notes.findById(req.params.id);\r\n+\r\n+    if (!note) {\r\n+      return res.status(404).send(\"Not found\");\r\n+    }\r\n+\r\n+    // Log the note's user ID and the logged-in user's ID\r\n+    console.log(\"Note owner ID: \", note.user.toString());\r\n+    console.log(\"Logged-in user ID: \", req.user.id);\r\n+\r\n+    if (note.user.toString() !== req.user.id) {\r\n+      return res.status(401).send(\"Not Allowed\");\r\n+    }\r\n+\r\n     const newNote = {};\r\n     if (title) newNote.title = title;\r\n     if (description) newNote.description = description;\r\n-    if (priority) newNote.priority = priority; // Only updating priority\r\n+    if (priority) newNote.priority = priority;\r\n \r\n-    let note = await Notes.findById(req.params.id);\r\n-    if (!note) return res.status(404).send(\"Not found\");\r\n-    if (note.user.toString() !== req.user.id)\r\n-      return res.status(401).send(\"Not Allowed\");\r\n-\r\n     note = await Notes.findByIdAndUpdate(\r\n       req.params.id,\r\n       { $set: newNote },\r\n       { new: true }\r\n     );\r\n+\r\n     res.json(note);\r\n   } catch (error) {\r\n     console.error(error);\r\n     res.status(500).json({ error: \"Internal server error\" });\r\n"
                },
                {
                    "date": 1739452612958,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -63,27 +63,19 @@\n     }\r\n   }\r\n );\r\n \r\n-// Route 3: Update an existing note using PUT \"api/notes/updatenote\". Requires login\r\n+// Route 3: Update an existing note using PUT \"api/notes/updatenote\". Requires login// Route to update a note\r\n router.put(\"/updatenote/:id\", fetchuser, async (req, res) => {\r\n   const { title, description, priority } = req.body;\r\n \r\n   try {\r\n-    // Log the incoming note ID and request body\r\n-    console.log(\"Note ID: \", req.params.id);\r\n-    console.log(\"Request body: \", req.body);\r\n-\r\n     let note = await Notes.findById(req.params.id);\r\n-\r\n     if (!note) {\r\n       return res.status(404).send(\"Not found\");\r\n     }\r\n \r\n-    // Log the note's user ID and the logged-in user's ID\r\n-    console.log(\"Note owner ID: \", note.user.toString());\r\n-    console.log(\"Logged-in user ID: \", req.user.id);\r\n-\r\n+    // Check if the logged-in user owns the note\r\n     if (note.user.toString() !== req.user.id) {\r\n       return res.status(401).send(\"Not Allowed\");\r\n     }\r\n \r\n"
                },
                {
                    "date": 1739452750093,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -68,30 +68,21 @@\n router.put(\"/updatenote/:id\", fetchuser, async (req, res) => {\r\n   const { title, description, priority } = req.body;\r\n \r\n   try {\r\n+    // Log the incoming note ID from URL parameters\r\n+    console.log(\"Note ID from URL: \", req.params.id);\r\n+    console.log(\"Request body: \", req.body);\r\n+\r\n     let note = await Notes.findById(req.params.id);\r\n+\r\n     if (!note) {\r\n       return res.status(404).send(\"Not found\");\r\n     }\r\n \r\n-    // Check if the logged-in user owns the note\r\n-    if (note.user.toString() !== req.user.id) {\r\n-      return res.status(401).send(\"Not Allowed\");\r\n-    }\r\n+    console.log(\"Note found: \", note); // Log the note object to check its details\r\n \r\n-    const newNote = {};\r\n-    if (title) newNote.title = title;\r\n-    if (description) newNote.description = description;\r\n-    if (priority) newNote.priority = priority;\r\n-\r\n-    note = await Notes.findByIdAndUpdate(\r\n-      req.params.id,\r\n-      { $set: newNote },\r\n-      { new: true }\r\n-    );\r\n-\r\n-    res.json(note);\r\n+    // Rest of your code...\r\n   } catch (error) {\r\n     console.error(error);\r\n     res.status(500).json({ error: \"Internal server error\" });\r\n   }\r\n"
                },
                {
                    "date": 1739454034504,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -64,13 +64,14 @@\n   }\r\n );\r\n \r\n // Route 3: Update an existing note using PUT \"api/notes/updatenote\". Requires login// Route to update a note\r\n+// Route 3: Update an existing note using PUT \"api/notes/updatenote/:id\". Requires login\r\n router.put(\"/updatenote/:id\", fetchuser, async (req, res) => {\r\n   const { title, description, priority } = req.body;\r\n \r\n   try {\r\n-    // Log the incoming note ID from URL parameters\r\n+    // Log incoming request details\r\n     console.log(\"Note ID from URL: \", req.params.id);\r\n     console.log(\"Request body: \", req.body);\r\n \r\n     let note = await Notes.findById(req.params.id);\r\n@@ -78,13 +79,27 @@\n     if (!note) {\r\n       return res.status(404).send(\"Not found\");\r\n     }\r\n \r\n+    // Check if logged-in user owns this note\r\n+    if (note.user.toString() !== req.user.id) {\r\n+      return res.status(401).send(\"Not Allowed\");\r\n+    }\r\n+\r\n     console.log(\"Note found: \", note); // Log the note object to check its details\r\n \r\n-    // Rest of your code...\r\n+    // Update the note\r\n+    const updatedNote = await Notes.findByIdAndUpdate(\r\n+      req.params.id,\r\n+      { $set: { title, description, priority } },\r\n+      { new: true } // This returns the updated note\r\n+    );\r\n+\r\n+    console.log(\"Updated Note: \", updatedNote);\r\n+\r\n+    res.json(updatedNote); // Send updated note as response\r\n   } catch (error) {\r\n-    console.error(error);\r\n+    console.error(\"Error updating note:\", error);\r\n     res.status(500).json({ error: \"Internal server error\" });\r\n   }\r\n });\r\n \r\n"
                },
                {
                    "date": 1739454443901,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -64,42 +64,37 @@\n   }\r\n );\r\n \r\n // Route 3: Update an existing note using PUT \"api/notes/updatenote\". Requires login// Route to update a note\r\n-// Route 3: Update an existing note using PUT \"api/notes/updatenote/:id\". Requires login\r\n router.put(\"/updatenote/:id\", fetchuser, async (req, res) => {\r\n   const { title, description, priority } = req.body;\r\n \r\n   try {\r\n-    // Log incoming request details\r\n-    console.log(\"Note ID from URL: \", req.params.id);\r\n-    console.log(\"Request body: \", req.body);\r\n+    console.log(\"Note ID from URL: \", req.params.id); // Debug log\r\n+    console.log(\"Request body: \", req.body); // Debug log\r\n \r\n     let note = await Notes.findById(req.params.id);\r\n-\r\n     if (!note) {\r\n-      return res.status(404).send(\"Not found\");\r\n+      return res.status(404).send(\"Note not found\");\r\n     }\r\n \r\n-    // Check if logged-in user owns this note\r\n+    console.log(\"Note found: \", note); // Debug log\r\n+    console.log(\"User ID from token: \", req.user.id); // Debug log\r\n+\r\n+    // Check if the logged-in user is the same as the one who created the note\r\n     if (note.user.toString() !== req.user.id) {\r\n       return res.status(401).send(\"Not Allowed\");\r\n     }\r\n \r\n-    console.log(\"Note found: \", note); // Log the note object to check its details\r\n-\r\n-    // Update the note\r\n-    const updatedNote = await Notes.findByIdAndUpdate(\r\n+    // Proceed with update if user is authorized\r\n+    note = await Notes.findByIdAndUpdate(\r\n       req.params.id,\r\n-      { $set: { title, description, priority } },\r\n-      { new: true } // This returns the updated note\r\n+      { title, description, priority },\r\n+      { new: true }\r\n     );\r\n-\r\n-    console.log(\"Updated Note: \", updatedNote);\r\n-\r\n-    res.json(updatedNote); // Send updated note as response\r\n+    res.json(note);\r\n   } catch (error) {\r\n-    console.error(\"Error updating note:\", error);\r\n+    console.error(error);\r\n     res.status(500).json({ error: \"Internal server error\" });\r\n   }\r\n });\r\n \r\n"
                },
                {
                    "date": 1739454607559,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -64,8 +64,9 @@\n   }\r\n );\r\n \r\n // Route 3: Update an existing note using PUT \"api/notes/updatenote\". Requires login// Route to update a note\r\n+// Route 3: Update an existing note using PUT \"api/notes/updatenote\". Requires login\r\n router.put(\"/updatenote/:id\", fetchuser, async (req, res) => {\r\n   const { title, description, priority } = req.body;\r\n \r\n   try {\r\n@@ -79,10 +80,10 @@\n \r\n     console.log(\"Note found: \", note); // Debug log\r\n     console.log(\"User ID from token: \", req.user.id); // Debug log\r\n \r\n-    // Check if the logged-in user is the same as the one who created the note\r\n-    if (note.user.toString() !== req.user.id) {\r\n+    // Fix: Ensure comparison of ObjectIds as strings\r\n+    if (note.user.toString() !== req.user.id.toString()) {\r\n       return res.status(401).send(\"Not Allowed\");\r\n     }\r\n \r\n     // Proceed with update if user is authorized\r\n"
                },
                {
                    "date": 1739455327982,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -64,17 +64,16 @@\n   }\r\n );\r\n \r\n // Route 3: Update an existing note using PUT \"api/notes/updatenote\". Requires login// Route to update a note\r\n-// Route 3: Update an existing note using PUT \"api/notes/updatenote\". Requires login\r\n router.put(\"/updatenote/:id\", fetchuser, async (req, res) => {\r\n   const { title, description, priority } = req.body;\r\n \r\n   try {\r\n     console.log(\"Note ID from URL: \", req.params.id); // Debug log\r\n     console.log(\"Request body: \", req.body); // Debug log\r\n \r\n-    let note = await Notes.findById(req.params.id);\r\n+    let note = await Notes.findById(noteID);\r\n     if (!note) {\r\n       return res.status(404).send(\"Note not found\");\r\n     }\r\n \r\n"
                },
                {
                    "date": 1739455412751,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -65,33 +65,35 @@\n );\r\n \r\n // Route 3: Update an existing note using PUT \"api/notes/updatenote\". Requires login// Route to update a note\r\n router.put(\"/updatenote/:id\", fetchuser, async (req, res) => {\r\n-  const { title, description, priority } = req.body;\r\n-\r\n   try {\r\n-    console.log(\"Note ID from URL: \", req.params.id); // Debug log\r\n-    console.log(\"Request body: \", req.body); // Debug log\r\n+    const noteId = req.params.id; // ✅ Correct variable name\r\n \r\n-    let note = await Notes.findById(noteID);\r\n+    if (!mongoose.Types.ObjectId.isValid(noteId)) {\r\n+      return res.status(400).send(\"Invalid note ID format\");\r\n+    }\r\n+\r\n+    let note = await Notes.findById(noteId);\r\n     if (!note) {\r\n       return res.status(404).send(\"Note not found\");\r\n     }\r\n \r\n-    console.log(\"Note found: \", note); // Debug log\r\n-    console.log(\"User ID from token: \", req.user.id); // Debug log\r\n-\r\n-    // Fix: Ensure comparison of ObjectIds as strings\r\n-    if (note.user.toString() !== req.user.id.toString()) {\r\n+    if (note.user.toString() !== req.user.id) {\r\n       return res.status(401).send(\"Not Allowed\");\r\n     }\r\n \r\n-    // Proceed with update if user is authorized\r\n+    // Update note\r\n     note = await Notes.findByIdAndUpdate(\r\n-      req.params.id,\r\n-      { title, description, priority },\r\n+      noteId, // ✅ Corrected variable\r\n+      {\r\n+        title: req.body.title,\r\n+        description: req.body.description,\r\n+        priority: req.body.priority,\r\n+      },\r\n       { new: true }\r\n     );\r\n+\r\n     res.json(note);\r\n   } catch (error) {\r\n     console.error(error);\r\n     res.status(500).json({ error: \"Internal server error\" });\r\n"
                },
                {
                    "date": 1739455483941,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,7 @@\n const express = require(\"express\");\r\n+const mongoose = require(\"mongoose\");\r\n+\r\n const router = express.Router();\r\n const fetchuser = require(\"../middleware/fetchuser\");\r\n const Notes = require(\"../models/Notes\");\r\n const { body, validationResult } = require(\"express-validator\");\r\n"
                },
                {
                    "date": 1739455572384,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -73,8 +73,9 @@\n \r\n     if (!mongoose.Types.ObjectId.isValid(noteId)) {\r\n       return res.status(400).send(\"Invalid note ID format\");\r\n     }\r\n+    console.log(\"Note ID from URL:\", req.params.id);\r\n \r\n     let note = await Notes.findById(noteId);\r\n     if (!note) {\r\n       return res.status(404).send(\"Note not found\");\r\n"
                },
                {
                    "date": 1739459835788,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -21,48 +21,34 @@\n router.post(\r\n   \"/addnote\",\r\n   fetchuser,\r\n   [\r\n-    body(\"title\", \"Enter a proper title name (minimum 5 characters)\").isLength({\r\n+    body(\"title\", \"Enter a valid title\").isLength({ min: 3 }),\r\n+    body(\"description\", \"Description must be atleast 5 characters\").isLength({\r\n       min: 5,\r\n     }),\r\n-    body(\r\n-      \"description\",\r\n-      \"Enter a proper description (minimum 5 characters)\"\r\n-    ).isLength({\r\n-      min: 5,\r\n-    }),\r\n-    body(\"priority\", \"Enter a valid priority (LOW/MED/HIGH)\").custom(\r\n-      (value) => {\r\n-        const validPriorities = [\"LOW\", \"MED\", \"HIGH\"];\r\n-        if (!validPriorities.includes(value)) {\r\n-          throw new Error(\"Priority must be one of: LOW, MED, HIGH\");\r\n-        }\r\n-        return true;\r\n-      }\r\n-    ),\r\n   ],\r\n   async (req, res) => {\r\n     try {\r\n+      const { title, description, tag } = req.body;\r\n+\r\n+      // If there are errors, return Bad request and the errors\r\n       const errors = validationResult(req);\r\n       if (!errors.isEmpty()) {\r\n         return res.status(400).json({ errors: errors.array() });\r\n       }\r\n-\r\n-      const { title, description, priority } = req.body; // Removed `tag`\r\n-\r\n-      const note = new Notes({\r\n+      const note = new Note({\r\n         title,\r\n         description,\r\n-        priority, // Only saving priority\r\n+        tag,\r\n         user: req.user.id,\r\n       });\r\n+      const savedNote = await note.save();\r\n \r\n-      const savedNote = await note.save();\r\n       res.json(savedNote);\r\n     } catch (error) {\r\n-      console.error(error);\r\n-      res.status(500).json({ error: \"Internal server error\" });\r\n+      console.error(error.message);\r\n+      res.status(500).send(\"Internal Server Error\");\r\n     }\r\n   }\r\n );\r\n \r\n"
                },
                {
                    "date": 1739460194527,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -28,9 +28,9 @@\n     }),\r\n   ],\r\n   async (req, res) => {\r\n     try {\r\n-      const { title, description, tag } = req.body;\r\n+      const { title, description, priority } = req.body;\r\n \r\n       // If there are errors, return Bad request and the errors\r\n       const errors = validationResult(req);\r\n       if (!errors.isEmpty()) {\r\n@@ -38,9 +38,9 @@\n       }\r\n       const note = new Note({\r\n         title,\r\n         description,\r\n-        tag,\r\n+        priority,\r\n         user: req.user.id,\r\n       });\r\n       const savedNote = await note.save();\r\n \r\n"
                },
                {
                    "date": 1739460232158,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,9 +2,9 @@\n const mongoose = require(\"mongoose\");\r\n \r\n const router = express.Router();\r\n const fetchuser = require(\"../middleware/fetchuser\");\r\n-const Notes = require(\"../models/Notes\");\r\n+const Note = require(\"../models/Notes\");\r\n const { body, validationResult } = require(\"express-validator\");\r\n \r\n // Route 1: Get all notes for the logged-in user using GET \"api/notes/fetchallnotes\". Requires login\r\n router.get(\"/fetchallnotes\", fetchuser, async (req, res) => {\r\n"
                },
                {
                    "date": 1739460268113,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,9 +8,9 @@\n \r\n // Route 1: Get all notes for the logged-in user using GET \"api/notes/fetchallnotes\". Requires login\r\n router.get(\"/fetchallnotes\", fetchuser, async (req, res) => {\r\n   try {\r\n-    const notes = await Notes.find({ user: req.user.id });\r\n+    const notes = await Note.find({ user: req.user.id });\r\n     res.json(notes);\r\n   } catch (error) {\r\n     console.error(error);\r\n     res.status(500).json({ error: \"Internal server error\" });\r\n@@ -61,9 +61,9 @@\n       return res.status(400).send(\"Invalid note ID format\");\r\n     }\r\n     console.log(\"Note ID from URL:\", req.params.id);\r\n \r\n-    let note = await Notes.findById(noteId);\r\n+    let note = await Note.findById(noteId);\r\n     if (!note) {\r\n       return res.status(404).send(\"Note not found\");\r\n     }\r\n \r\n@@ -71,9 +71,9 @@\n       return res.status(401).send(\"Not Allowed\");\r\n     }\r\n \r\n     // Update note\r\n-    note = await Notes.findByIdAndUpdate(\r\n+    note = await Note.findByIdAndUpdate(\r\n       noteId, // ✅ Corrected variable\r\n       {\r\n         title: req.body.title,\r\n         description: req.body.description,\r\n@@ -91,14 +91,14 @@\n \r\n // Route 4: Delete an existing note using DELETE \"api/notes/deletenote\". Requires login\r\n router.delete(\"/deletenote/:id\", fetchuser, async (req, res) => {\r\n   try {\r\n-    let note = await Notes.findById(req.params.id);\r\n+    let note = await Note.findById(req.params.id);\r\n     if (!note) return res.status(404).send(\"Not found\");\r\n     if (note.user.toString() !== req.user.id)\r\n       return res.status(401).send(\"Not Allowed\");\r\n \r\n-    note = await Notes.findByIdAndDelete(req.params.id);\r\n+    note = await Note.findByIdAndDelete(req.params.id);\r\n     res.json({ result: \"Previous note has been deleted\", note });\r\n   } catch (error) {\r\n     console.error(error);\r\n     res.status(500).json({ error: \"Internal server error\" });\r\n"
                },
                {
                    "date": 1739461641991,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -54,14 +54,15 @@\n \r\n // Route 3: Update an existing note using PUT \"api/notes/updatenote\". Requires login// Route to update a note\r\n router.put(\"/updatenote/:id\", fetchuser, async (req, res) => {\r\n   try {\r\n-    const noteId = req.params.id; // ✅ Correct variable name\r\n+    const noteId = req.params.id;\r\n+    console.log(\"🔹 Update Request Received for:\", noteId);\r\n+    console.log(\"🔹 Request Body:\", req.body);\r\n \r\n     if (!mongoose.Types.ObjectId.isValid(noteId)) {\r\n       return res.status(400).send(\"Invalid note ID format\");\r\n     }\r\n-    console.log(\"Note ID from URL:\", req.params.id);\r\n \r\n     let note = await Note.findById(noteId);\r\n     if (!note) {\r\n       return res.status(404).send(\"Note not found\");\r\n@@ -70,19 +71,16 @@\n     if (note.user.toString() !== req.user.id) {\r\n       return res.status(401).send(\"Not Allowed\");\r\n     }\r\n \r\n-    // Update note\r\n-    note = await Note.findByIdAndUpdate(\r\n-      noteId, // ✅ Corrected variable\r\n-      {\r\n-        title: req.body.title,\r\n-        description: req.body.description,\r\n-        priority: req.body.priority,\r\n-      },\r\n-      { new: true }\r\n-    );\r\n+    // Ensure priority is being updated\r\n+    const updatedFields = {};\r\n+    if (req.body.title) updatedFields.title = req.body.title;\r\n+    if (req.body.description) updatedFields.description = req.body.description;\r\n+    if (req.body.priority) updatedFields.priority = req.body.priority; // ✅ Ensure priority updates\r\n \r\n+    note = await Note.findByIdAndUpdate(noteId, updatedFields, { new: true });\r\n+    console.log(\"✅ Note Updated:\", note);\r\n     res.json(note);\r\n   } catch (error) {\r\n     console.error(error);\r\n     res.status(500).json({ error: \"Internal server error\" });\r\n"
                },
                {
                    "date": 1739461842792,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -52,8 +52,9 @@\n   }\r\n );\r\n \r\n // Route 3: Update an existing note using PUT \"api/notes/updatenote\". Requires login// Route to update a note\r\n+// Route 3: Update an existing note\r\n router.put(\"/updatenote/:id\", fetchuser, async (req, res) => {\r\n   try {\r\n     const noteId = req.params.id;\r\n     console.log(\"🔹 Update Request Received for:\", noteId);\r\n@@ -71,13 +72,14 @@\n     if (note.user.toString() !== req.user.id) {\r\n       return res.status(401).send(\"Not Allowed\");\r\n     }\r\n \r\n-    // Ensure priority is being updated\r\n-    const updatedFields = {};\r\n-    if (req.body.title) updatedFields.title = req.body.title;\r\n-    if (req.body.description) updatedFields.description = req.body.description;\r\n-    if (req.body.priority) updatedFields.priority = req.body.priority; // ✅ Ensure priority updates\r\n+    // Update note fields\r\n+    const updatedFields = {\r\n+      title: req.body.title || note.title,\r\n+      description: req.body.description || note.description,\r\n+      priority: req.body.priority || note.priority, // ✅ Ensure priority updates\r\n+    };\r\n \r\n     note = await Note.findByIdAndUpdate(noteId, updatedFields, { new: true });\r\n     console.log(\"✅ Note Updated:\", note);\r\n     res.json(note);\r\n"
                },
                {
                    "date": 1739463062007,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -52,9 +52,9 @@\n   }\r\n );\r\n \r\n // Route 3: Update an existing note using PUT \"api/notes/updatenote\". Requires login// Route to update a note\r\n-// Route 3: Update an existing note\r\n+\r\n router.put(\"/updatenote/:id\", fetchuser, async (req, res) => {\r\n   try {\r\n     const noteId = req.params.id;\r\n     console.log(\"🔹 Update Request Received for:\", noteId);\r\n"
                }
            ],
            "date": 1739442233755,
            "name": "Commit-0",
            "content": "const express = require(\"express\");\r\nconst router = express.Router();\r\nconst fetchuser = require(\"../middleware/fetchuser\");\r\nconst Notes = require(\"../models/Notes\");\r\nconst { body, validationResult } = require(\"express-validator\");\r\n\r\n// Route 1: Get all notes for the logged-in user using GET \"api/notes/fetchallnotes\". Requires login\r\nrouter.get(\"/fetchallnotes\", fetchuser, async (req, res) => {\r\n  try {\r\n    const notes = await Notes.find({ user: req.user.id });\r\n    res.json(notes);\r\n  } catch (error) {\r\n    console.error(error);\r\n    res.status(500).json({ error: \"Internal server error\" });\r\n  }\r\n});\r\n\r\n// Route 2: Add a new note using POST \"api/notes/addnote\". Requires login// Route 2: Add a new note using POST \"api/notes/addnote\". Requires login\r\nrouter.post(\r\n  \"/addnote\",\r\n  fetchuser,\r\n  [\r\n    body(\"title\", \"Enter a proper title name (minimum 5 characters)\").isLength({\r\n      min: 5,\r\n    }),\r\n    body(\r\n      \"description\",\r\n      \"Enter a proper description (minimum 5 characters)\"\r\n    ).isLength({\r\n      min: 5,\r\n    }),\r\n    body(\"priority\", \"Enter a valid priority (LOW/MED/HIGH)\").custom(\r\n      (value) => {\r\n        const validPriorities = [\"LOW\", \"MED\", \"HIGH\"];\r\n        if (!validPriorities.includes(value)) {\r\n          throw new Error(\"Priority must be one of: LOW, MED, HIGH\");\r\n        }\r\n        return true;\r\n      }\r\n    ),\r\n  ],\r\n  async (req, res) => {\r\n    try {\r\n      const errors = validationResult(req);\r\n      if (!errors.isEmpty()) {\r\n        return res.status(400).json({ errors: errors.array() });\r\n      }\r\n\r\n      const { title, description, priority, tag } = req.body;\r\n\r\n      const note = new Notes({\r\n        title,\r\n        description,\r\n        priority,\r\n        tag,\r\n        user: req.user.id,\r\n      });\r\n\r\n      const savedNote = await note.save();\r\n      res.json(savedNote);\r\n    } catch (error) {\r\n      console.error(error);\r\n      res.status(500).json({ error: \"Internal server error\" });\r\n    }\r\n  }\r\n);\r\n\r\n// Route 3:Update an existing note using POST \"api/notes/updatenote\". Requires login\r\nrouter.put(\"/updatenote/:id\", fetchuser, async (req, res) => {\r\n  const { title, description, priority } = req.body;\r\n  try {\r\n    //create a newnote object\r\n    const newNote = {};\r\n    if (title) {\r\n      newNote.title = title;\r\n    }\r\n    if (description) {\r\n      newNote.description = description;\r\n    }\r\n    if (priority) {\r\n      newNote.priority = priority;\r\n    }\r\n    //find the note to be update and update it\r\n    let note = await Notes.findById(req.params.id);\r\n    if (!note) {\r\n      return res.status(404).send(\"Not found\");\r\n    }\r\n    if (note.user.toString() !== req.user.id) {\r\n      return res.status(401).send(\"Not Allowed\");\r\n    }\r\n    //new true means if new contact comes then updated to the database\r\n    note = await Notes.findByIdAndUpdate(\r\n      req.params.id,\r\n      { $set: newNote },\r\n      { new: true }\r\n    );\r\n    res.json(note);\r\n  } catch (error) {\r\n    console.error(error);\r\n    res.status(500).json({ error: \"Internal server error\" });\r\n  }\r\n});\r\n\r\n// Route 4:Delete an existing note using DELETE \"api/notes/deletenote\". Requires login\r\nrouter.delete(\"/deletenote/:id\", fetchuser, async (req, res) => {\r\n  try {\r\n    //find the note to be deleted and delete it\r\n    let note = await Notes.findById(req.params.id);\r\n    if (!note) {\r\n      return res.status(404).send(\"Not found\");\r\n    }\r\n    //deletion only if the node is of that individual user\r\n    if (note.user.toString() !== req.user.id) {\r\n      return res.status(401).send(\"Not Allowed\");\r\n    }\r\n    //new true means if new contact comes then updated to the database\r\n    note = await Notes.findByIdAndDelete(req.params.id);\r\n    res.json({ result: \"previous note has been deleted\", note: note });\r\n  } catch (error) {\r\n    console.error(error);\r\n    res.status(500).json({ error: \"Internal server error\" });\r\n  }\r\n});\r\n\r\nmodule.exports = router;\r\n"
        }
    ]
}