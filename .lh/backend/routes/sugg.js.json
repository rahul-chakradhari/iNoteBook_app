{
    "sourceFile": "backend/routes/sugg.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1739465966384,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1739466506729,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,9 +5,9 @@\n const Suggestion = require(\"../models/Suggestion\");\r\n const { body, validationResult } = require(\"express-validator\");\r\n \r\n // Route 1: Get all suggestions using GET \"api/suggestions/fetchallsuggestions\"\r\n-router.get(\"/fetchallsuggestions\", async (req, res) => {\r\n+router.get(\"/fetchallsugg\", async (req, res) => {\r\n   try {\r\n     const suggestions = await Suggestion.find();\r\n     res.json(suggestions);\r\n   } catch (error) {\r\n@@ -17,9 +17,9 @@\n });\r\n \r\n // Route 2: Add a new suggestion using POST \"api/suggestions/addsuggestion\". Requires login\r\n router.post(\r\n-  \"/addsuggestion\",\r\n+  \"/addsugg\",\r\n   fetchuser,\r\n   [\r\n     body(\"suggestion\", \"Suggestion must be at least 5 characters\").isLength({\r\n       min: 5,\r\n@@ -50,9 +50,9 @@\n   }\r\n );\r\n \r\n // Route 3: Update an existing suggestion using PUT \"api/suggestions/updatesuggestion\". Requires login\r\n-router.put(\"/updatesuggestion/:id\", fetchuser, async (req, res) => {\r\n+router.put(\"/updatesugg/:id\", fetchuser, async (req, res) => {\r\n   try {\r\n     const suggestionId = req.params.id;\r\n \r\n     if (!mongoose.Types.ObjectId.isValid(suggestionId)) {\r\n@@ -87,9 +87,9 @@\n   }\r\n });\r\n \r\n // Route 4: Delete an existing suggestion using DELETE \"api/suggestions/deletesuggestion\". Requires login\r\n-router.delete(\"/deletesuggestion/:id\", fetchuser, async (req, res) => {\r\n+router.delete(\"/deletesugg/:id\", fetchuser, async (req, res) => {\r\n   try {\r\n     let suggestion = await Suggestion.findById(req.params.id);\r\n     if (!suggestion) return res.status(404).send(\"Suggestion not found\");\r\n \r\n"
                }
            ],
            "date": 1739465966384,
            "name": "Commit-0",
            "content": "const express = require(\"express\");\r\nconst mongoose = require(\"mongoose\");\r\nconst router = express.Router();\r\nconst fetchuser = require(\"../middleware/fetchuser\");\r\nconst Suggestion = require(\"../models/Suggestion\");\r\nconst { body, validationResult } = require(\"express-validator\");\r\n\r\n// Route 1: Get all suggestions using GET \"api/suggestions/fetchallsuggestions\"\r\nrouter.get(\"/fetchallsuggestions\", async (req, res) => {\r\n  try {\r\n    const suggestions = await Suggestion.find();\r\n    res.json(suggestions);\r\n  } catch (error) {\r\n    console.error(error);\r\n    res.status(500).json({ error: \"Internal server error\" });\r\n  }\r\n});\r\n\r\n// Route 2: Add a new suggestion using POST \"api/suggestions/addsuggestion\". Requires login\r\nrouter.post(\r\n  \"/addsuggestion\",\r\n  fetchuser,\r\n  [\r\n    body(\"suggestion\", \"Suggestion must be at least 5 characters\").isLength({\r\n      min: 5,\r\n    }),\r\n  ],\r\n  async (req, res) => {\r\n    try {\r\n      const { suggestion, email } = req.body;\r\n\r\n      // If there are errors, return Bad request and the errors\r\n      const errors = validationResult(req);\r\n      if (!errors.isEmpty()) {\r\n        return res.status(400).json({ errors: errors.array() });\r\n      }\r\n\r\n      const newSuggestion = new Suggestion({\r\n        suggestion,\r\n        email,\r\n        user: req.user.id,\r\n      });\r\n\r\n      const savedSuggestion = await newSuggestion.save();\r\n      res.json(savedSuggestion);\r\n    } catch (error) {\r\n      console.error(error.message);\r\n      res.status(500).send(\"Internal Server Error\");\r\n    }\r\n  }\r\n);\r\n\r\n// Route 3: Update an existing suggestion using PUT \"api/suggestions/updatesuggestion\". Requires login\r\nrouter.put(\"/updatesuggestion/:id\", fetchuser, async (req, res) => {\r\n  try {\r\n    const suggestionId = req.params.id;\r\n\r\n    if (!mongoose.Types.ObjectId.isValid(suggestionId)) {\r\n      return res.status(400).send(\"Invalid suggestion ID format\");\r\n    }\r\n\r\n    let suggestion = await Suggestion.findById(suggestionId);\r\n    if (!suggestion) {\r\n      return res.status(404).send(\"Suggestion not found\");\r\n    }\r\n\r\n    if (suggestion.user.toString() !== req.user.id) {\r\n      return res.status(401).send(\"Not Allowed\");\r\n    }\r\n\r\n    // Update suggestion fields\r\n    const updatedFields = {\r\n      suggestion: req.body.suggestion || suggestion.suggestion,\r\n    };\r\n\r\n    suggestion = await Suggestion.findByIdAndUpdate(\r\n      suggestionId,\r\n      updatedFields,\r\n      {\r\n        new: true,\r\n      }\r\n    );\r\n    res.json(suggestion);\r\n  } catch (error) {\r\n    console.error(error);\r\n    res.status(500).json({ error: \"Internal server error\" });\r\n  }\r\n});\r\n\r\n// Route 4: Delete an existing suggestion using DELETE \"api/suggestions/deletesuggestion\". Requires login\r\nrouter.delete(\"/deletesuggestion/:id\", fetchuser, async (req, res) => {\r\n  try {\r\n    let suggestion = await Suggestion.findById(req.params.id);\r\n    if (!suggestion) return res.status(404).send(\"Suggestion not found\");\r\n\r\n    if (suggestion.user.toString() !== req.user.id)\r\n      return res.status(401).send(\"Not Allowed\");\r\n\r\n    suggestion = await Suggestion.findByIdAndDelete(req.params.id);\r\n    res.json({ result: \"Suggestion has been deleted\", suggestion });\r\n  } catch (error) {\r\n    console.error(error);\r\n    res.status(500).json({ error: \"Internal server error\" });\r\n  }\r\n});\r\n\r\n// Route 5: Like a suggestion using PUT \"api/suggestions/like/:id\". Requires login\r\nrouter.put(\"/like/:id\", fetchuser, async (req, res) => {\r\n  try {\r\n    const suggestionId = req.params.id;\r\n    const userEmail = req.user.email; // Assumed that email is available in `req.user`\r\n\r\n    let suggestion = await Suggestion.findById(suggestionId);\r\n    if (!suggestion) return res.status(404).send(\"Suggestion not found\");\r\n\r\n    // Check if user already liked the suggestion\r\n    if (suggestion.likedBy.includes(userEmail)) {\r\n      return res.status(400).send(\"You have already liked this suggestion\");\r\n    }\r\n\r\n    // Add user to the likedBy array\r\n    suggestion.likedBy.push(userEmail);\r\n\r\n    // Increment the like count\r\n    suggestion.likes += 1;\r\n\r\n    suggestion = await Suggestion.findByIdAndUpdate(suggestionId, suggestion, {\r\n      new: true,\r\n    });\r\n\r\n    res.json(suggestion);\r\n  } catch (error) {\r\n    console.error(error);\r\n    res.status(500).json({ error: \"Internal server error\" });\r\n  }\r\n});\r\n\r\n// Route 6: Unlike a suggestion using PUT \"api/suggestions/unlike/:id\". Requires login\r\n// Route 6: Unlike a suggestion using PUT \"api/suggestions/unlike/:id\". Requires login\r\nrouter.put(\"/unlike/:id\", fetchuser, async (req, res) => {\r\n  try {\r\n    const suggestionId = req.params.id;\r\n    const userEmail = req.user.email; // Assumed that email is available in `req.user`\r\n\r\n    let suggestion = await Suggestion.findById(suggestionId);\r\n    if (!suggestion) return res.status(404).send(\"Suggestion not found\");\r\n\r\n    // Check if user has liked the suggestion\r\n    if (!suggestion.likedBy.includes(userEmail)) {\r\n      return res.status(400).send(\"You have not liked this suggestion\");\r\n    }\r\n\r\n    // Remove user from the likedBy array\r\n    suggestion.likedBy = suggestion.likedBy.filter(\r\n      (email) => email !== userEmail\r\n    );\r\n\r\n    // Decrement the like count, but ensure it doesn't go below 0\r\n    suggestion.likes = Math.max(suggestion.likes - 1, 0); // Ensure likes never go below 0\r\n\r\n    suggestion = await Suggestion.findByIdAndUpdate(suggestionId, suggestion, {\r\n      new: true,\r\n    });\r\n\r\n    res.json(suggestion);\r\n  } catch (error) {\r\n    console.error(error);\r\n    res.status(500).json({ error: \"Internal server error\" });\r\n  }\r\n});\r\n\r\nmodule.exports = router;\r\n"
        }
    ]
}