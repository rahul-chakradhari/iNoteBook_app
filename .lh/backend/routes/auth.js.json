{
    "sourceFile": "backend/routes/auth.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1739445430462,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1739455487403,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,8 @@\n // Importing required modules\r\n const express = require(\"express\");\r\n+const mongoose = require(\"mongoose\");\r\n+\r\n const { body, validationResult } = require(\"express-validator\");\r\n const bcrypt = require(\"bcryptjs\");\r\n const jwt = require(\"jsonwebtoken\");\r\n const User = require(\"../models/User\");\r\n"
                }
            ],
            "date": 1739445430462,
            "name": "Commit-0",
            "content": "// Importing required modules\r\nconst express = require(\"express\");\r\nconst { body, validationResult } = require(\"express-validator\");\r\nconst bcrypt = require(\"bcryptjs\");\r\nconst jwt = require(\"jsonwebtoken\");\r\nconst User = require(\"../models/User\");\r\nconst fetchuser = require(\"../middleware/fetchuser\");\r\n\r\nconst router = express.Router();\r\nconst JWT_SECRET = \"password@123\"; // Keep this in .env file in production\r\n\r\n// ðŸš€ Route 1: Create a user using: POST \"api/auth/createuser\". Doesn't require login\r\nrouter.post(\r\n  \"/createuser\",\r\n  [\r\n    body(\"email\", \"Enter a valid email\").isEmail(),\r\n    body(\"name\", \"Name must be at least 5 characters\").isLength({ min: 5 }),\r\n    body(\"password\", \"Password must be at least 8 characters\").isLength({\r\n      min: 8,\r\n    }),\r\n  ],\r\n  async (req, res) => {\r\n    let success = false;\r\n\r\n    // Validate request body\r\n    const errors = validationResult(req);\r\n    if (!errors.isEmpty()) {\r\n      return res.status(400).json({ success, errors: errors.array() });\r\n    }\r\n\r\n    try {\r\n      // Check if the user already exists\r\n      let user = await User.findOne({ email: req.body.email });\r\n\r\n      if (user) {\r\n        return res\r\n          .status(400)\r\n          .json({ success, error: \"This email is already registered\" });\r\n      }\r\n\r\n      // Hash the password\r\n      const salt = await bcrypt.genSalt(10);\r\n      const secured_pass = await bcrypt.hash(req.body.password, salt);\r\n\r\n      // Create new user\r\n      user = await User.create({\r\n        name: req.body.name,\r\n        password: secured_pass,\r\n        email: req.body.email,\r\n      });\r\n\r\n      // Generate JWT token\r\n      const data = {\r\n        user: {\r\n          id: user.id,\r\n        },\r\n      };\r\n      const authtoken = jwt.sign(data, JWT_SECRET);\r\n\r\n      success = true;\r\n      res.json({ success: true, user, authtoken });\r\n    } catch (err) {\r\n      console.error(\"Error in /createuser:\", err);\r\n      res.status(500).json({ success: false, error: \"Internal Server Error\" });\r\n    }\r\n  }\r\n);\r\n\r\n// ðŸš€ Route 2: Authenticate a user using: POST \"api/auth/login\". Doesn't require login\r\nrouter.post(\r\n  \"/login\",\r\n  [\r\n    body(\"email\", \"Enter a valid email\").isEmail(),\r\n    body(\"password\", \"Password cannot be blank\").exists(),\r\n  ],\r\n  async (req, res) => {\r\n    let success = false;\r\n\r\n    // Validate request body\r\n    const errors = validationResult(req);\r\n    if (!errors.isEmpty()) {\r\n      return res.status(400).json({ success, errors: errors.array() });\r\n    }\r\n\r\n    const { email, password } = req.body;\r\n\r\n    try {\r\n      // Check if user exists\r\n      let user = await User.findOne({ email });\r\n      if (!user) {\r\n        return res.status(400).json({ success, error: \"Invalid credentials\" });\r\n      }\r\n\r\n      // Compare password\r\n      const passwordCompare = await bcrypt.compare(password, user.password);\r\n      if (!passwordCompare) {\r\n        return res.status(400).json({ success, error: \"Invalid credentials\" });\r\n      }\r\n\r\n      // Generate JWT token\r\n      const data = {\r\n        user: {\r\n          id: user.id,\r\n        },\r\n      };\r\n      const authtoken = jwt.sign(data, JWT_SECRET);\r\n\r\n      success = true;\r\n      res.json({\r\n        success,\r\n        authtoken,\r\n        user: { name: user.name, email: user.email },\r\n      });\r\n    } catch (err) {\r\n      console.error(\"Error in /login:\", err);\r\n      res.status(500).json({ success: false, error: \"Internal Server Error\" });\r\n    }\r\n  }\r\n);\r\n\r\n// ðŸš€ Route 3: Get logged-in user details using: POST \"api/auth/getuser\". Requires login\r\nrouter.post(\"/getuser\", fetchuser, async (req, res) => {\r\n  try {\r\n    const userId = req.user.id;\r\n    const user = await User.findById(userId).select(\"-password\"); // Exclude password\r\n    res.json({ success: true, user });\r\n  } catch (err) {\r\n    console.error(\"Error in /getuser:\", err);\r\n    res.status(500).json({ success: false, error: \"Internal Server Error\" });\r\n  }\r\n});\r\n\r\nmodule.exports = router;\r\n"
        }
    ]
}