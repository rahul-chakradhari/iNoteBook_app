{
    "sourceFile": "src/components/Topsuggestion.jsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 4,
            "patches": [
                {
                    "date": 1739517326832,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1739517466039,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -25,72 +25,8 @@\n   useEffect(() => {\r\n     fetchTopSuggestions();\r\n   }, []);\r\n \r\n-  // Handle like functionality\r\n-  const handleLike = async (id) => {\r\n-    try {\r\n-      const response = await fetch(\r\n-        `http://localhost:5000/api/suggestions/like/${id}`,\r\n-        {\r\n-          method: \"PUT\",\r\n-          headers: {\r\n-            \"Content-Type\": \"application/json\",\r\n-            \"auth-token\": localStorage.getItem(\"token\"), // Ensure authentication\r\n-          },\r\n-        }\r\n-      );\r\n-      const data = await response.json();\r\n-\r\n-      if (data.success) {\r\n-        // After liking, update the list to reflect the new like count\r\n-        setTopSuggestions((prevSuggestions) =>\r\n-          prevSuggestions.map((suggestion) =>\r\n-            suggestion._id === id\r\n-              ? { ...suggestion, likes: suggestion.likes + 1 }\r\n-              : suggestion\r\n-          )\r\n-        );\r\n-      } else {\r\n-        setError(\"Failed to like the suggestion.\");\r\n-      }\r\n-    } catch (error) {\r\n-      setError(\"Error liking the suggestion.\");\r\n-    }\r\n-  };\r\n-\r\n-  // Handle unlike functionality\r\n-  const handleUnlike = async (id) => {\r\n-    try {\r\n-      const response = await fetch(\r\n-        `http://localhost:5000/api/suggestions/unlike/${id}`,\r\n-        {\r\n-          method: \"PUT\",\r\n-          headers: {\r\n-            \"Content-Type\": \"application/json\",\r\n-            \"auth-token\": localStorage.getItem(\"token\"), // Ensure authentication\r\n-          },\r\n-        }\r\n-      );\r\n-      const data = await response.json();\r\n-\r\n-      if (data.success) {\r\n-        // After unliking, update the list to reflect the new like count\r\n-        setTopSuggestions((prevSuggestions) =>\r\n-          prevSuggestions.map((suggestion) =>\r\n-            suggestion._id === id\r\n-              ? { ...suggestion, likes: suggestion.likes - 1 }\r\n-              : suggestion\r\n-          )\r\n-        );\r\n-      } else {\r\n-        setError(\"Failed to unlike the suggestion.\");\r\n-      }\r\n-    } catch (error) {\r\n-      setError(\"Error unliking the suggestion.\");\r\n-    }\r\n-  };\r\n-\r\n   // Display loading spinner, error, or suggestions\r\n   if (loading) return <div>Loading...</div>;\r\n \r\n   if (error) return <div className=\"alert alert-danger\">{error}</div>;\r\n"
                },
                {
                    "date": 1739517517975,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -38,23 +38,9 @@\n         {topSuggestions.map((suggestion) => (\r\n           <li key={suggestion._id} className=\"list-group-item\">\r\n             <strong>{suggestion.suggestion}</strong>\r\n             <p>Email: {suggestion.email}</p>\r\n-            <p>Likes: {suggestion.likes}</p>\r\n-            <p>Submitted by: {suggestion.user}</p>\r\n \r\n-            <button\r\n-              onClick={() => handleLike(suggestion._id)}\r\n-              className=\"btn btn-success mx-2\"\r\n-            >\r\n-              Like\r\n-            </button>\r\n-            <button\r\n-              onClick={() => handleUnlike(suggestion._id)}\r\n-              className=\"btn btn-danger\"\r\n-            >\r\n-              Unlike\r\n-            </button>\r\n             <hr />\r\n           </li>\r\n         ))}\r\n       </ul>\r\n"
                },
                {
                    "date": 1739517564427,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,11 +2,10 @@\n \r\n const TopSuggestions = () => {\r\n   const [topSuggestions, setTopSuggestions] = useState([]);\r\n   const [loading, setLoading] = useState(true);\r\n-  const [error, setError] = useState(\"\"); // To handle errors\r\n+  const [error, setError] = useState(\"\");\r\n \r\n-  // Function to fetch the top suggestions from the backend\r\n   const fetchTopSuggestions = async () => {\r\n     try {\r\n       const response = await fetch(\r\n         \"http://localhost:5000/api/sugg/top-suggestions\"\r\n@@ -20,16 +19,13 @@\n       setLoading(false);\r\n     }\r\n   };\r\n \r\n-  // Fetch top suggestions when the component mounts\r\n   useEffect(() => {\r\n     fetchTopSuggestions();\r\n   }, []);\r\n \r\n-  // Display loading spinner, error, or suggestions\r\n   if (loading) return <div>Loading...</div>;\r\n-\r\n   if (error) return <div className=\"alert alert-danger\">{error}</div>;\r\n \r\n   return (\r\n     <div>\r\n@@ -37,10 +33,15 @@\n       <ul className=\"list-group\">\r\n         {topSuggestions.map((suggestion) => (\r\n           <li key={suggestion._id} className=\"list-group-item\">\r\n             <strong>{suggestion.suggestion}</strong>\r\n-            <p>Email: {suggestion.email}</p>\r\n-\r\n+            <p>\r\n+              <strong>Name:</strong> {suggestion.name}\r\n+            </p>{\" \"}\r\n+            {/* Display User's Name */}\r\n+            <p>\r\n+              <strong>Email:</strong> {suggestion.email}\r\n+            </p>\r\n             <hr />\r\n           </li>\r\n         ))}\r\n       </ul>\r\n"
                },
                {
                    "date": 1739518902420,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -28,9 +28,11 @@\n   if (error) return <div className=\"alert alert-danger\">{error}</div>;\r\n \r\n   return (\r\n     <div>\r\n-      <h2>Top Suggestions</h2>\r\n+      <h2>\r\n+        Top Suggestions <i className=\"fa-solid fa-fire\"></i>{\" \"}\r\n+      </h2>\r\n       <ul className=\"list-group\">\r\n         {topSuggestions.map((suggestion) => (\r\n           <li key={suggestion._id} className=\"list-group-item\">\r\n             <strong>{suggestion.suggestion}</strong>\r\n"
                }
            ],
            "date": 1739517326832,
            "name": "Commit-0",
            "content": "import React, { useState, useEffect } from \"react\";\r\n\r\nconst TopSuggestions = () => {\r\n  const [topSuggestions, setTopSuggestions] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(\"\"); // To handle errors\r\n\r\n  // Function to fetch the top suggestions from the backend\r\n  const fetchTopSuggestions = async () => {\r\n    try {\r\n      const response = await fetch(\r\n        \"http://localhost:5000/api/sugg/top-suggestions\"\r\n      );\r\n      const data = await response.json();\r\n      setTopSuggestions(data);\r\n    } catch (error) {\r\n      console.error(\"Error fetching top suggestions:\", error);\r\n      setError(\"Error fetching top suggestions.\");\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  // Fetch top suggestions when the component mounts\r\n  useEffect(() => {\r\n    fetchTopSuggestions();\r\n  }, []);\r\n\r\n  // Handle like functionality\r\n  const handleLike = async (id) => {\r\n    try {\r\n      const response = await fetch(\r\n        `http://localhost:5000/api/suggestions/like/${id}`,\r\n        {\r\n          method: \"PUT\",\r\n          headers: {\r\n            \"Content-Type\": \"application/json\",\r\n            \"auth-token\": localStorage.getItem(\"token\"), // Ensure authentication\r\n          },\r\n        }\r\n      );\r\n      const data = await response.json();\r\n\r\n      if (data.success) {\r\n        // After liking, update the list to reflect the new like count\r\n        setTopSuggestions((prevSuggestions) =>\r\n          prevSuggestions.map((suggestion) =>\r\n            suggestion._id === id\r\n              ? { ...suggestion, likes: suggestion.likes + 1 }\r\n              : suggestion\r\n          )\r\n        );\r\n      } else {\r\n        setError(\"Failed to like the suggestion.\");\r\n      }\r\n    } catch (error) {\r\n      setError(\"Error liking the suggestion.\");\r\n    }\r\n  };\r\n\r\n  // Handle unlike functionality\r\n  const handleUnlike = async (id) => {\r\n    try {\r\n      const response = await fetch(\r\n        `http://localhost:5000/api/suggestions/unlike/${id}`,\r\n        {\r\n          method: \"PUT\",\r\n          headers: {\r\n            \"Content-Type\": \"application/json\",\r\n            \"auth-token\": localStorage.getItem(\"token\"), // Ensure authentication\r\n          },\r\n        }\r\n      );\r\n      const data = await response.json();\r\n\r\n      if (data.success) {\r\n        // After unliking, update the list to reflect the new like count\r\n        setTopSuggestions((prevSuggestions) =>\r\n          prevSuggestions.map((suggestion) =>\r\n            suggestion._id === id\r\n              ? { ...suggestion, likes: suggestion.likes - 1 }\r\n              : suggestion\r\n          )\r\n        );\r\n      } else {\r\n        setError(\"Failed to unlike the suggestion.\");\r\n      }\r\n    } catch (error) {\r\n      setError(\"Error unliking the suggestion.\");\r\n    }\r\n  };\r\n\r\n  // Display loading spinner, error, or suggestions\r\n  if (loading) return <div>Loading...</div>;\r\n\r\n  if (error) return <div className=\"alert alert-danger\">{error}</div>;\r\n\r\n  return (\r\n    <div>\r\n      <h2>Top Suggestions</h2>\r\n      <ul className=\"list-group\">\r\n        {topSuggestions.map((suggestion) => (\r\n          <li key={suggestion._id} className=\"list-group-item\">\r\n            <strong>{suggestion.suggestion}</strong>\r\n            <p>Email: {suggestion.email}</p>\r\n            <p>Likes: {suggestion.likes}</p>\r\n            <p>Submitted by: {suggestion.user}</p>\r\n\r\n            <button\r\n              onClick={() => handleLike(suggestion._id)}\r\n              className=\"btn btn-success mx-2\"\r\n            >\r\n              Like\r\n            </button>\r\n            <button\r\n              onClick={() => handleUnlike(suggestion._id)}\r\n              className=\"btn btn-danger\"\r\n            >\r\n              Unlike\r\n            </button>\r\n            <hr />\r\n          </li>\r\n        ))}\r\n      </ul>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TopSuggestions;\r\n"
        }
    ]
}